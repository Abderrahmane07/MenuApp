@page "/menu/{Id:int}"
@inject IGeneralService GeneralService
@inject IQrCodeService QrCodeService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<h3>Menu Categories</h3>

<a href="/edit-category?restaurantId=@Id" class="btn btn-primary">Add a new category</a>
<a href="/edit-dish?restaurantId=@Id" class="btn btn-primary">Add a new dish</a>

<div class="card mt-4">
    <div class="card-body">
        <h5 class="card-title">Menu QR Code</h5>
        @if (!string.IsNullOrEmpty(qrCodeImage))
        {
            <div class="text-center">
                <img src="@qrCodeImage" alt="Menu QR Code" class="img-fluid mb-3" style="max-width: 250px;" />
                <div>
                    <button class="btn btn-primary" @onclick="DownloadQRCode">Download QR Code</button>
                </div>
            </div>
        }
    </div>
</div>

@if (categories != null && categories.Any())
{
    <ul class="list-group">
        @foreach (var category in categories.Where(c => c.ParentCategoryId == null))
        {
            <li class="list-group-item">
                @DisplayCategory(category)
            </li>
        }
    </ul>
}
else
{
    <p>No categories available.</p>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    List<Category> categories = new List<Category>();
    List<Dish> dishes = new List<Dish>();
    List<Price> prices = new List<Price>();

    private string qrCodeImage;

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            categories = await GeneralService.GetAllCategoriesByRestaurantIdAsync((int)Id);
            dishes = await GeneralService.GetAllDishesByRestaurantIdAsync((int)Id);

            foreach(Dish dish in dishes)
            {
                List<Price> dishPrices = await GeneralService.GetAllPricesByDishIdAsync(dish.Id);
                prices.AddRange(dishPrices);
            }

            qrCodeImage = QrCodeService.GenerateQRCodeForMenu((int)Id);
        }
    }

    RenderFragment DisplayCategory(Category category) {
        return @<div class="category-container">
            <strong>@category.Name (<a href="/edit-category/@category.Id">edit</a>)</strong>: @category.Description
            @if (dishes.Any(d => d.CategoryId == category.Id))
            {
                <ul>
                    @foreach (var dish in dishes.Where(d => d.CategoryId == category.Id))
                    {
                        <li>
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <strong>@dish.Name</strong>
                                    <span class="text-muted">@dish.Ingredients</span>
                                </div>
                                <a href="/edit-dish/@dish.Id" class="btn btn-sm btn-outline-primary ms-2">edit</a>
                            </div>

                            <!-- Pricing section -->
                            <div class="d-flex flex-wrap mt-1">
                                @foreach (var price in prices.Where(p => p.DishId == dish.Id))
                            {
                                <div class="me-3">
                                    <span class="fw-bold">@price.PriceName:</span>
                                    <span>@price.PriceAmount €</span>
                                </div>
                            }
                            </div>
                        </li>
                    }
                </ul>
            }
            @if (categories.Any(c => c.ParentCategoryId == category.Id))
            {
                <ul class="list-group mt-2">
                    @foreach (var childCategory in categories.Where(c => c.ParentCategoryId == category.Id))
                    {
                        <li class="list-group-item">
                            @DisplayCategory(childCategory)
                        </li>
                    }
                </ul>
            }
    </div>;
    }

    private async Task DownloadQRCode()
    {
        if (!string.IsNullOrEmpty(qrCodeImage) && Id.HasValue)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("downloadQRCode",qrCodeImage,$"menu-qr-{Id}.png");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error downloading QR code: {ex.Message}");
            }
        }
    }
}
