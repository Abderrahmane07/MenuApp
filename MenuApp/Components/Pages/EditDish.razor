@page "/edit-dish"
@page "/edit-dish/{Id:int}"
@inject IGeneralService GeneralService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer



@if(Id is null)
{
	<h3>Add Dish</h3>
}
else
{
	<h3>Edit Dish</h3>
}

<EditForm Model="CurrentDish" OnSubmit="HandleSubmit">
	<div>
		<label for="name">Dish Name</label>
		<InputText id="name" @bind-Value="CurrentDish.Name" class="form-control" />
	</div>
	<div>
		<label for="ingredients">Ingredients</label>
		<InputText id="ingredients" @bind-Value="CurrentDish.Ingredients" class="form-control" />
	</div>
	<div>
		<label for="dishtcategory">Dish Category</label>
		<InputSelect id="dishtcategory" @bind-Value="CurrentDish.CategoryId" class="form-control">
			<option value="">Select an option</option>
			@foreach (var restCategory in restaurantCategories)
			{
				<option value="@restCategory.Id">@restCategory.Name</option>
			}
		</InputSelect>
	</div>

	<h4>Pricing for this Dish</h4>
	@foreach (Price price in CurrentPrices)
	{
		<div>
			<label for="name">Price Name</label>
			<InputText id="name" @bind-Value="price.PriceName" class="form-control" />
		</div>
		<div>
			<label for="price">Price Amount</label>
			<InputNumber id="price" @bind-Value="price.PriceAmount" class="form-control" />
		</div>
	}
	<button type="button" @onclick="AddPrice" class="btn btn-secondary">Add Price</button>

	@if(Id is not null)
	{
		<button @onclick="DeleteDish" class="btn btn-danger">Delete</button>
	}	
	<button type="submit" class="btn btn-primary">Save</button>
</EditForm>


@code {
	[Parameter]
	public int? Id { get; set; }
	public Dish CurrentDish { get; set; } = new();

	public List<Price> CurrentPrices { get; set; } = new() { new Price() };

	[SupplyParameterFromQuery]
	public int? RestaurantId { get; set; }

	List<Category> restaurantCategories = new List<Category>();

	protected override async Task OnParametersSetAsync()
	{
		if(Id is not null)
		{
			var dish = await GeneralService.GetDishByIdAsync((int)Id);
			if(dish != null)
			{
				CurrentDish = dish;
			}
			// CurrentPrices = await GeneralService.GetAllPricesByDishIdAsync((int)Id);
			var prices = await GeneralService.GetAllPricesByDishIdAsync((int)Id); ;
			if (prices.Count > 0)
			{
				CurrentPrices = prices;
			}
		}
		if(RestaurantId != null)
		{
			CurrentDish.RestaurantId = (int)RestaurantId;
		}
		restaurantCategories = await GeneralService.GetAllCategoriesByRestaurantIdAsync(CurrentDish.RestaurantId);
	}

	void AddPrice()
	{
		CurrentPrices.Add(new Price());
	}

	async Task DeleteDish()
	{
		await GeneralService.DeleteDishAsync((int) Id!);
		NavigationManager.NavigateTo($"/menu/{CurrentDish.RestaurantId}");
	}

	async Task HandleSubmit()
	{
		if(Id is not null)
		{
			await GeneralService.UpdateDishAsync(CurrentDish,(int) Id);
			
		}
		else
		{
			Id = await GeneralService.AddDishAsync(CurrentDish);
		}

		foreach (Price price in CurrentPrices)
		{
			price.DishId = (int)Id;
			if (price.Id != 0)
			{
				await GeneralService.UpdatePriceAsync(price, price.Id);
			}
			else
			{
				await GeneralService.AddPriceAsync(price);
			}
		}

		NavigationManager.NavigateTo($"/menu/{CurrentDish.RestaurantId}");
	}
}
